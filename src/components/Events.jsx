import React, { useState, useEffect } from 'react'
import axios from 'axios' // axios –∏–º–ø–æ—Ä—Ç—Ç–∞—É
import {
  Box,
  Container,
  Grid,
  Card,
  CardContent,
  CardMedia,
  Typography,
  TextField,
  MenuItem,
  Select,
  Button,
  CircularProgress, // –ñ“Ø–∫—Ç–µ—É –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã “Ø—à—ñ–Ω
  InputLabel, // Select “Ø—à—ñ–Ω
  FormControl, // Select “Ø—à—ñ–Ω
} from '@mui/material'
import { Link } from 'react-router-dom' // –¢–æ–ª—ã“ì—ã—Ä–∞“õ “Ø—à—ñ–Ω
import { styled } from '@mui/material/styles' // styled –∏–º–ø–æ—Ä—Ç—Ç–∞—É

// Styled Card (TourList-—Ç–µ–Ω –∞–ª—ã–Ω“ì–∞–Ω–¥–∞–π)
const StyledEventCard = styled(Card)(({ theme }) => ({
  height: '100%',
  display: 'flex',
  flexDirection: 'column',
  borderRadius: theme.spacing(2), // –î”©“£–≥–µ–ª–µ–∫—Ç–µ–ª–≥–µ–Ω —à–µ—Ç—Ç–µ—Ä
  boxShadow: theme.shadows[3], // –ñ–µ“£—ñ–ª –∫”©–ª–µ“£–∫–µ
  transition: 'transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out',
  '&:hover': {
    transform: 'translateY(-5px)', // “Æ—Å—Ç—ñ–Ω–µ –∞–ø–∞—Ä“ì–∞–Ω–¥–∞ –∫”©—Ç–µ—Ä—ñ–ª—É
    boxShadow: theme.shadows[6], // –¢–µ—Ä–µ“£—ñ—Ä–µ–∫ –∫”©–ª–µ“£–∫–µ
  },
}))

// Styled CardMedia (—Å—É—Ä–µ—Ç “Ø—à—ñ–Ω)
const StyledCardMedia = styled(CardMedia)(({ theme }) => ({
  height: 200,
  objectFit: 'cover',
  [theme.breakpoints.down('sm')]: {
    height: 160,
  },
  borderRadius: `${theme.spacing(2)} ${theme.spacing(2)} 0 0`, // –ñ–æ“ì–∞—Ä“ì—ã –±“±—Ä—ã—à—Ç–∞—Ä—ã –¥”©“£–≥–µ–ª–µ–∫
}))

const EventsPage = () => {
  const [events, setEvents] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)

  const [selectedDate, setSelectedDate] = useState('')
  const [selectedLocation, setSelectedLocation] = useState('')
  const [selectedType, setSelectedType] = useState('')

  const BASE_URL = 'http://127.0.0.1:8000/storage/' // –°—É—Ä–µ—Ç—Ç–µ—Ä “Ø—à—ñ–Ω BASE_URL

  const getImageUrl = (imagePath) => {
    if (!imagePath)
      return 'https://via.placeholder.com/300x200?text=Event+Image'
    if (imagePath.startsWith('http')) return imagePath
    return `${BASE_URL}${encodeURIComponent(imagePath)}`
  }

  useEffect(() => {
    const fetchEvents = async () => {
      setLoading(true)
      setError(null)
      try {
        const params = {}
        if (selectedDate) params.date = selectedDate
        if (selectedLocation) params.location_name = selectedLocation
        if (selectedType) params.event_type = selectedType

        const response = await axios.get('http://127.0.0.1:8000/api/events', {
          params,
        })
        console.log('API Response:', response.data) // –ë“±–ª –∂–æ–ª—ã —Ç–æ–ª—ã“õ –∂–∞—É–∞–ø—Ç—ã “õ–∞—Ä–∞“£—ã–∑

        // –î–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –¥“±—Ä—ã—Å –∂–æ–ª–º–µ–Ω –∞–ª—É
        setEvents(response.data.data.data || []) // <<< –ú”ô—Å–µ–ª–µ –æ—Å—ã–Ω–¥–∞! “ö–∞–∑—ñ—Ä API –∂–∞—É–∞–±—ã–Ω–¥–∞“ì—ã "data" —ñ—à—ñ–Ω–¥–µ —Ç–∞“ì—ã "data" –º–∞—Å—Å–∏–≤—ñ –±–∞—Ä.
      } catch (err) {
        console.error('–û“õ–∏“ì–∞–ª–∞—Ä–¥—ã –∂“Ø–∫—Ç–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –∫–µ—Ç—Ç—ñ:', err)
        setError(err.message || '–û“õ–∏“ì–∞–ª–∞—Ä–¥—ã –∂“Ø–∫—Ç–µ—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.')
      } finally {
        setLoading(false)
      }
    }

    fetchEvents()
  }, [selectedDate, selectedLocation, selectedType])
  // Mock “õ–∞–ª–∞–ª–∞—Ä –º–µ–Ω —Ç–∏–ø—Ç–µ—Ä (API-–¥–µ–Ω City –∂”ô–Ω–µ EventType —Ç—ñ–∑—ñ–º–¥–µ—Ä—ñ–Ω –∞–ª—É –∫–µ—Ä–µ–∫)
  const mockLocations = ['–ê–ª–º–∞—Ç—ã', '–ê—Å—Ç–∞–Ω–∞', '–®—ã–º–∫–µ–Ω—Ç', '–ê—Ç—ã—Ä–∞—É']
  const mockTypes = [
    '–ö–æ–Ω—Ü–µ—Ä—Ç',
    '–°–ø–æ—Ä—Ç—Ç—ã“õ —ñ—Å-—à–∞—Ä–∞',
    '–§–µ—Å—Ç–∏–≤–∞–ª—å',
    '–ö”©—Ä–º–µ',
    '–ë—ñ–ª—ñ–º –±–µ—Ä—É',
    '–ë–∞–ª–∞–ª–∞—Ä“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω',
  ]

  if (loading) {
    return (
      <Container
        sx={{
          mt: 14,
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          minHeight: '50vh',
        }}
      >
        <CircularProgress />
        <Typography ml={2}>–û“õ–∏“ì–∞–ª–∞—Ä –∂“Ø–∫—Ç–µ–ª—É–¥–µ...</Typography>
      </Container>
    )
  }

  if (error) {
    return (
      <Container sx={{ mt: 14, textAlign: 'center' }}>
        <Typography variant="h6" color="error">
          “ö–∞—Ç–µ: {error}
        </Typography>
      </Container>
    )
  }

  return (
    <Container sx={{ mt: 14 }}>
      <Box sx={{ textAlign: 'center', mb: 4 }}>
        <Typography variant="h4" fontWeight="bold" gutterBottom>
          –ñ–∞“õ—ã–Ω –∞—Ä–∞–¥–∞“ì—ã —ñ—Å-—à–∞—Ä–∞–ª–∞—Ä
        </Typography>
        <Typography variant="subtitle1" color="gray">
          ”®–∑—ñ“£—ñ–∑–≥–µ —ã“£“ì–∞–π–ª—ã —ñ—Å-—à–∞—Ä–∞–ª–∞—Ä–¥—ã —Ç–∞“£–¥–∞–ø, —Ç—ñ—Ä–∫–µ–ª—ñ“£—ñ–∑!
        </Typography>
      </Box>

      {/* –§–∏–ª—å—Ç—Ä–ª–µ—Ä */}
      <Grid container spacing={2} sx={{ mb: 4 }}>
        <Grid item xs={12} sm={4}>
          <TextField
            type="date"
            fullWidth
            label="–ö“Ø–Ω—ñ"
            InputLabelProps={{ shrink: true }}
            value={selectedDate}
            onChange={(e) => setSelectedDate(e.target.value)}
          />
        </Grid>
        <Grid item xs={12} sm={4}>
          <FormControl fullWidth>
            <InputLabel>“ö–∞–ª–∞</InputLabel>
            <Select
              value={selectedLocation}
              label="“ö–∞–ª–∞"
              onChange={(e) => setSelectedLocation(e.target.value)}
            >
              <MenuItem value="">–ë–∞—Ä–ª—ã“õ “õ–∞–ª–∞–ª–∞—Ä</MenuItem>
              {mockLocations.map((loc) => (
                <MenuItem key={loc} value={loc}>
                  {loc}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </Grid>
        <Grid item xs={12} sm={4}>
          <FormControl fullWidth>
            <InputLabel>–¢“Ø—Ä—ñ</InputLabel>
            <Select
              value={selectedType}
              label="–¢“Ø—Ä—ñ"
              onChange={(e) => setSelectedType(e.target.value)}
            >
              <MenuItem value="">–ë–∞—Ä–ª—ã“õ —Ç“Ø—Ä–ª–µ—Ä—ñ</MenuItem>
              {mockTypes.map((type) => (
                <MenuItem key={type} value={type}>
                  {type}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </Grid>
      </Grid>

      {/* –Ü—Å-—à–∞—Ä–∞–ª–∞—Ä –∫–∞—Ä—Ç–æ—á–∫–∞–ª–∞—Ä—ã */}
      <Grid container spacing={3}>
        {events.length > 0 ? (
          events.map((event) => (
            <Grid item xs={12} sm={6} md={4} key={event.id}>
              <StyledEventCard>
                <StyledCardMedia
                  image={getImageUrl(event.image)}
                  title={event.title}
                />
                <CardContent sx={{ flexGrow: 1 }}>
                  <Typography variant="h6" fontWeight="bold">
                    {event.title}
                  </Typography>
                  <Typography color="text.secondary" variant="body2">
                    {new Date(event.start_date).toLocaleDateString()} ‚Ä¢{' '}
                    {event.location_name || event.city?.name || '–ë–µ–ª–≥—ñ—Å—ñ–∑ –æ—Ä—ã–Ω'}
                  </Typography>
                  <Typography variant="body2" sx={{ mt: 1 }}>
                    {event.description?.substring(0, 100)}...
                  </Typography>
                  <Button
                    fullWidth
                    variant="contained"
                    color="primary"
                    sx={{ mt: 2, borderRadius: 3 }}
                    component={Link}
                    to={`/events/${event.id}`} // –ñ–µ–∫–µ –±–µ—Ç–∫–µ —Å—ñ–ª—Ç–µ–º–µ
                  >
                    –¢–æ–ª—ã“ì—ã—Ä–∞“õ
                  </Button>
                </CardContent>
              </StyledEventCard>
            </Grid>
          ))
        ) : (
          <Typography sx={{ textAlign: 'center', mt: 4, width: '100%' }}>
            –ö–µ—à—ñ—Ä—ñ“£—ñ–∑, —Å—ñ–∑–¥—ñ“£ —Ñ–∏–ª—å—Ç—Ä–ª–µ—Ä—ñ“£—ñ–∑–≥–µ —Å”ô–π–∫–µ—Å —ñ—Å-—à–∞—Ä–∞–ª–∞—Ä —Ç–∞–±—ã–ª–º–∞–¥—ã üòî
          </Typography>
        )}
      </Grid>
    </Container>
  )
}

export default EventsPage
